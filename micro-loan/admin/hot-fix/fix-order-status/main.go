package main

import (
	"flag"

	"github.com/astaxie/beego/logs"
	"github.com/erikdubbelboer/gspt"

	_ "micro-loan/common/lib/clogs"
	_ "micro-loan/common/lib/db/mysql"
	"micro-loan/common/service"

	"micro-loan/common/models"
	"micro-loan/common/tools"
	"micro-loan/common/types"
)

var isRun bool
var runNum int

func init() {
	flag.BoolVar(&isRun, "run", false, "whether Run")
	flag.IntVar(&runNum, "run-num", 0, "Run num")
}

func main() {
	flag.Parse()

	// 设置进程 title
	procTitle := "fix_order_status"
	gspt.SetProcTitle(procTitle)

	logs.Info("[%s] start launch.", procTitle)

	orderSlice := []int64{181002020009659662, 181003020009568024, 181009020015829215, 181012020023104909, 181014020012715898, 181015020001325749, 181015020006625694, 181016020021023965, 181016020033136748, 181017020001625250, 181017020005934265, 181017020018285186, 181017020022851388, 181017020027875383, 181018020004238818, 181018020008737245, 181018020010393261, 181018020011423750, 181018020013223177, 181018020013856179, 181018020014435998, 181018020015643115, 181018020017944018, 181018020021454265, 181018020022795076, 181018020024904517, 181018020025145670, 181018020028100826, 181018020028421476, 181018020028634325, 181018020029250809, 181018020029640714, 181018020031337877, 181018020031459800, 181018020031555598, 181018020032072414, 181018020032665124, 181018020032807292, 181018020032845318, 181018020032993482, 181018020033095579, 181018020033173846, 181019020000210777, 181019020000228082, 181019020000593080, 181019020001053945, 181019020001192424, 181019020001309355, 181019020001309967, 181019020001583255, 181019020001763274, 181019020001786811, 181019020001940790, 181019020001970064, 181019020002282915, 181019020002320502, 181019020002472950, 181019020002782306, 181019020003023906, 181019020003768250, 181019020004376538, 181019020004413251, 181019020004509623, 181019020004544554, 181019020005361208, 181019020005425842, 181019020005449286, 181019020005540826, 181019020005546006, 181019020005619884, 181019020005971004, 181019020006404646, 181019020006452063, 181019020006601672, 181019020007329082, 181019020007453630, 181019020007613339, 181019020007798663, 181019020008000621, 181019020008317369, 181019020008515583, 181019020008519165, 181019020008765018, 181019020008773124, 181019020008810416, 181019020009000032, 181019020009175083, 181019020009253240, 181019020009311722, 181019020009666349, 181019020009690530, 181019020009777011, 181019020009801475, 181019020010105737, 181019020010191882, 181019020010239958, 181019020010293449, 181019020010393528, 181019020010399258, 181019020010613321, 181019020010755800, 181019020011165013, 181019020011234385, 181019020011451528, 181019020011507125, 181019020012089605, 181019020012170572, 181019020012394465, 181019020012738197, 181019020012906888, 181019020012957656, 181019020013237581, 181019020013911501, 181019020013922164, 181019020014045825, 181019020014370823, 181019020014416823, 181019020014519693, 181019020014621192, 181019020014936554, 181019020015016493, 181019020015101638, 181019020015256746, 181019020015362657, 181019020015840683, 181019020016042755, 181019020016163863, 181019020016196503, 181019020016299716, 181019020016772173, 181019020017034495, 181019020017081957, 181019020017125868, 181019020017372815, 181019020017514491, 181019020017818854, 181019020017894974, 181019020018103299, 181019020018135983, 181019020018246534, 181019020018359628, 181019020018743609, 181019020018812889, 181019020018922430, 181019020019100102, 181019020019164059, 181019020019649000, 181019020020424835, 181019020020808673, 181019020021163270, 181019020021403064, 181019020021423970, 181019020022111678, 181019020022175225, 181019020022295528, 181019020022365593, 181019020022392071, 181019020022562832, 181019020022612378, 181019020022734086, 181019020022814100, 181019020022837101, 181019020022930119, 181019020022955426, 181019020023227700, 181019020023327936, 181019020023521621, 181019020023529559, 181019020023651539, 181019020023682427, 181019020023970091, 181019020024013028, 181019020024104681, 181019020024850750, 181019020025330791, 181019020025701729, 181019020025912995, 181019020026186589, 181019020026492912, 181019020026623538, 181019020027032381, 181019020027070782, 181019020027838426, 181019020027924450, 181019020028225850, 181019020028328647, 181019020028503587, 181019020028531562, 181019020028659207, 181019020028721077, 181019020028794341, 181019020028854916, 181019020029213300, 181019020029255008, 181019020029320734, 181019020029433721, 181019020029523763, 181019020029566312, 181019020029749059, 181019020029763535, 181019020030105690, 181019020030243670, 181019020030411429, 181019020030939646, 181019020030945974, 181019020031041826, 181019020031128739, 181019020031251476, 181019020031442411, 181019020031446638, 181019020031498546, 181019020031725647, 181019020031900475, 181019020032063341, 181019020032206289, 181019020032296372, 181019020032491526, 181019020032769233, 181019020032799159, 181019020032867161, 181019020033263796, 181019020033355072, 181019020033421795, 181019020033582804, 181019020033802233, 181019020033863978, 181019020034075648, 181019020034157139, 181019020034278516, 181019020034289884, 181019020034298446, 181019020034658614, 181020020000081979, 181020020000586458, 181020020000591884, 181020020000641761, 181020020000778893, 181020020000793634, 181020020000802651, 181020020000866041, 181020020001038570, 181020020001128812, 181020020001227796, 181020020001269803, 181020020001337972, 181020020001426518, 181020020001477851, 181020020001484555, 181020020001529856, 181020020001625904, 181020020001893420, 181020020002015236}
	// m := models.Order{}
	// o := orm.NewOrm()
	// o.Using(m.Using())

	timetag := tools.GetUnixMillis()
	logs.Info("Will do order num: ", len(orderSlice))

	for _, orderID := range orderSlice {
		if runNum <= 0 {
			logs.Warn("Run num is out, now:", runNum)
			break
		}
		runNum--
		order, err := models.GetOrder(orderID)
		if err != nil {
			logs.Error("orderID:%d not found", orderID)
			continue
		}
		if order.CheckStatus != types.LoanStatusReject {
			logs.Error("orderID:%d status:%d skip", orderID, order.CheckStatus)
			continue
		}
		if order.RiskCtlStatus != types.RiskCtlPhoneVerifyPass {
			logs.Error("orderID:%d status:%d skip", orderID, order.CheckStatus)
			continue
		}
		if order.FixedRandom != service.FixedPhoneVerifyRandom {
			logs.Error("orderID:%d status:%d skip", orderID, order.CheckStatus)
			continue
		}
		order.Utime = timetag
		order.CheckStatus = types.LoanStatusWait4Loan
		if isRun {
			num, err := models.UpdateOrder(&order)
			if num == 1 {
				logs.Warn("update succ: ", orderID)
				continue
			}
			logs.Error("update failed: ", orderID, err)
			continue
		}
		logs.Warn("check succ: ", orderID, order.CheckStatus, order.FixedRandom, order.RiskCtlStatus)

	}

	// for {
	//
	// 	order, err := models.GetOrder(orderId)
	// 	if err != nil {
	// 		fmt.Println("orderId:%d not found", orderId)
	// 		continue
	// 	}
	//
	// 	if order.CheckStatus != types.LoanStatusReject {
	// 		fmt.Println("orderId:%d status:%d skip", orderId, order.CheckStatus)
	// 		continue
	// 	}
	//
	// 	order.RiskCtlRegular = ""
	// 	order.CheckStatus = types.LoanStatus4Review
	// 	order.Utime = timetag
	// 	models.UpdateOrder(&order)
	// }
}
